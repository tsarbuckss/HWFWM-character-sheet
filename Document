<!DOCTYPE html>
<html lang="en" data-theme="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shareable Interactive Character Sheet</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&family=MedievalSharp&display=swap" rel="stylesheet">
    <style>
        :root {
            --bg-primary: #f7fafc; --bg-secondary: #ffffff; --text-primary: #2d3748;
            --text-secondary: #4a5568; --border-color: #e2e8f0; --accent-color: #4c51bf;
            --accent-text: #ffffff; --highlight-bg: #f8fafc; --bonus-text-color: #4c51bf;
            --mod-bg: #2d3748; --mod-text: #ffffff; --bg-image: none;
        }
        [data-theme="dark"] { --bg-primary: #1a202c; --bg-secondary: #2d3748; --text-primary: #edf2f7; --text-secondary: #a0aec0; --border-color: #4a5568; --accent-color: #667eea; --accent-text: #ffffff; --highlight-bg: #1a202c; --bonus-text-color: #9f7aea; --mod-bg: #e2e8f0; --mod-text: #1a202c; }
        [data-theme="forest"] { --bg-primary: #f0fff4; --bg-secondary: #ffffff; --text-primary: #2f4e3c; --text-secondary: #38a169; --border-color: #c6f6d5; --accent-color: #2f855a; --accent-text: #ffffff; --highlight-bg: #f0fff4; --bonus-text-color: #276749; --mod-bg: #2f4e3c; --mod-text: #ffffff; --bg-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80"%3E%3Cg fill="%23d4edda" fill-opacity="0.4"%3E%3Cpath fill-rule="evenodd" d="M11 0l5 20H6l5-20zm42 31l5 20H48l5-20zm-32 32l5 20H16l5-20z"/%3E%3C/g%3E%3C/svg%3E'); }
        [data-theme="hero"] { --bg-primary: #f7fafc; --bg-secondary: #ffffff; --text-primary: #2d3748; --text-secondary: #4a5568; --border-color: #e2e8f0; --accent-color: #c53030; --accent-text: #ffffff; --highlight-bg: #fefcbf; --bonus-text-color: #2b6cb0; --mod-bg: #2b6cb0; --mod-text: #fefcbf; }
        [data-theme="starry"] { --bg-primary: #1a202c; --bg-secondary: #2d3748; --text-primary: #e0e6f0; --text-secondary: #a0aec0; --border-color: #4a5568; --accent-color: #9f7aea; --accent-text: #ffffff; --highlight-bg: #1a202c; --bonus-text-color: #f6e05e; --mod-bg: #f6e05e; --mod-text: #1a202c; --bg-image: url('data:image/svg+xml,%3Csvg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"%3E%3Crect fill="%231a202c" width="100" height="100"/%3E%3Cg fill="%23f6e05e" fill-opacity="0.4"%3E%3Ccircle cx="50" cy="50" r="1"/%3E%3Ccircle cx="10" cy="10" r="1"/%3E%3Ccircle cx="90" cy="90" r="1"/%3E%3Ccircle cx="10" cy="90" r="1"/%3E%3Ccircle cx="90" cy="10" r="1"/%3E%3Ccircle cx="30" cy="70" r="1"/%3E%3Ccircle cx="70" cy="30" r="1"/%3E%3C/g%3E%3C/svg%3E'); }
        
        body { font-family: 'Inter', sans-serif; background-color: var(--bg-primary); background-image: var(--bg-image); color: var(--text-primary); transition: background-color 0.3s ease; }
        .medieval-title { font-family: 'MedievalSharp', cursive; }
        .section-container { background-color: var(--bg-secondary); color: var(--text-primary); border: 1px solid var(--border-color); border-radius: 0.5rem; box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); margin-bottom: 1.5rem; padding: 1.5rem; }
        .stat-box { background-color: var(--bg-secondary); border: 1px solid var(--border-color); border-radius: 0.5rem; padding: 1rem; text-align: center; }
        .skill-row { display: grid; grid-template-columns: auto 1fr 4rem auto; align-items: center; gap: 0.75rem; padding: 0.25rem 0; border-bottom: 1px solid var(--border-color); }
        .skill-row:last-child { border-bottom: none; }
        input, select, textarea { background-color: var(--highlight-bg); border: 1px solid var(--border-color); color: var(--text-primary); border-radius: 0.25rem; padding: 0.5rem; width: 100%; transition: all 0.2s ease; }
        input:focus, select:focus, textarea:focus { outline: 2px solid transparent; outline-offset: 2px; border-color: var(--accent-color); box-shadow: 0 0 0 3px color-mix(in srgb, var(--accent-color) 30%, transparent); }
        .section-title { color: var(--text-primary); border-bottom: 2px solid var(--border-color); padding-bottom: 0.5rem; margin-bottom: 1rem; font-size: 1.25rem; font-weight: 700;}
        .proficiency-checkbox, .awakening-checkbox, .bonus-toggle-checkbox { accent-color: var(--accent-color); width: 1.25rem; height: 1.25rem; flex-shrink: 0; }
        .essence-block { border: 1px solid var(--border-color); padding: 1rem; margin-bottom: 1.5rem; border-radius: 0.5rem; }
        .essence-title { color: var(--accent-color); font-size: 1.1rem; font-weight: 700; }
        .essence-label { font-weight: 600; color: var(--text-primary); margin-top: 0.75rem; display: block; }
        .awakening-details { display: none; margin-top: 0.5rem; background-color: color-mix(in srgb, var(--highlight-bg) 50%, var(--bg-secondary)); border-radius: 0.25rem; padding: 0.75rem; border: 1px solid var(--border-color); }
        .total-score { font-size: 2.25rem; font-weight: 700; line-height: 1; transition: color 0.2s; color: var(--text-primary); }
        .total-score.boosted { color: var(--bonus-text-color); }
        .mod-display { background-color: var(--mod-bg); color: var(--mod-text); border-radius: 9999px; width: 3rem; height: 3rem; display:flex; align-items:center; justify-content:center; }
        .main-tab { padding: 0.5rem 1rem; cursor: pointer; border-bottom: 2px solid transparent; font-weight: 600; font-size: 1.1rem; transition: all 0.2s ease; }
        .main-tab:hover { color: var(--accent-color); }
        .main-tab.active { color: var(--accent-color); border-color: var(--accent-color); }
        .action-button { background-color: var(--accent-color); color: var(--accent-text); font-weight: 700; border-radius: 0.5rem; padding: 0.5rem 1rem; transition: all 0.2s ease; }
        .action-button:hover { filter: brightness(1.1); }
        #general-result, #attack-result { background-color: var(--highlight-bg); border-radius: 0.5rem; height: 5rem; display: flex; flex-direction: column; align-items: center; justify-content: center; }
        .font-bold, .font-semibold { color: var(--text-primary); }
        .text-xs { color: var(--text-secondary); }
        #save-status { transition: opacity 0.5s; }
        .modal-overlay { position: fixed; top: 0; left: 0; right: 0; bottom: 0; background-color: rgba(0,0,0,0.5); display: flex; align-items: center; justify-content: center; z-index: 50; }
    </style>
</head>
<body>
    <div id="app-container" class="max-w-7xl mx-auto p-4 md:p-8">
        <!-- App Header -->
        <div class="flex justify-between items-start mb-4">
            <div id="save-status" class="text-sm opacity-0 font-semibold p-2"></div>
            <div class="flex items-center gap-4">
                <button id="share-button" class="action-button">Share Sheet</button>
                <div class="max-w-xs">
                    <label for="theme-selector" class="block text-sm font-medium">Theme</label>
                    <select id="theme-selector" data-id="theme-selector" class="mt-1 block w-full pl-3 pr-10 py-2 text-base rounded-md"></select>
                </div>
            </div>
        </div>
        <!-- Main Tabs -->
        <div id="main-nav-tabs" class="flex border-b mb-6" style="border-color: var(--border-color);"></div>
        <div id="main-content"></div>
    </div>
    <!-- Share Modal -->
    <div id="share-modal" class="modal-overlay hidden"></div>
    
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getFirestore, doc, setDoc, onSnapshot, getDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
        import { getAuth, signInAnonymously, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        
        const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : { apiKey: "DEMO", authDomain: "DEMO", projectId: "DEMO" };
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'dnd-sheet-app';

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);
        const auth = getAuth(app);
        
        let state = {};
        let characterId = null;
        let dbRef = null;
        let unsubscribe = null;
        let isUpdatingFromDb = false;

        const ABILITIES = ['strength', 'dexterity', 'constitution', 'intelligence', 'wisdom', 'charisma'];
        const SKILLS = [{ n: 'Acrobatics', a: 'dexterity' }, { n: 'Animal Handling', a: 'wisdom' }, { n: 'Arcana', a: 'intelligence' }, { n: 'Athletics', a: 'strength' }, { n: 'Deception', a: 'charisma' }, { n: 'History', a: 'intelligence' }, { n: 'Insight', a: 'wisdom' }, { n: 'Intimidation', a: 'charisma' }, { n: 'Investigation', a: 'intelligence' }, { n: 'Medicine', a: 'wisdom' }, { n: 'Nature', a: 'intelligence' }, { n: 'Perception', a: 'wisdom' }, { n: 'Performance', a: 'charisma' }, { n: 'Persuasion', a: 'charisma' }, { n: 'Religion', a: 'intelligence' }, { n: 'Sleight of Hand', a: 'dexterity' }, { n: 'Stealth', a: 'dexterity' }, { n: 'Survival', a: 'wisdom' }];
        const ESSENCE_TYPES = [{ title: 'Strength-Bound Essence', id: 'strength' }, { title: 'Speed-Bound Essence', id: 'speed' }, { title: 'Recovery-Bound Essence', id: 'recovery' }, { title: 'Confluence Essence', id: 'confluence' }];
        const THEMES = ['light', 'dark', 'forest', 'hero', 'starry'];
        
        // --- UTILITY FUNCTIONS ---
        function buildElement(tag, options = {}) {
            const el = document.createElement(tag);
            Object.entries(options).forEach(([key, value]) => {
                if (key === 'class') el.className = Array.isArray(value) ? value.join(' ') : value;
                else if (key === 'children') value.forEach(child => child && el.appendChild(child));
                else if (key === 'text') el.textContent = value;
                else if (key === 'on') Object.entries(value).forEach(([event, handler]) => el.addEventListener(event, handler));
                else if (value !== undefined) el.setAttribute(key, value);
            });
            return el;
        }

        const debouncedSave = (() => { let t; return () => { clearTimeout(t); t = setTimeout(saveData, 1000); }; })();

        // --- RENDER & CALCULATION ---
        function render() {
            isUpdatingFromDb = true;
            try {
                document.documentElement.dataset.theme = state['theme-selector'] || 'light';
                document.querySelectorAll('[data-id]').forEach(el => {
                    const id = el.dataset.id;
                    if(el.type === 'checkbox') el.checked = !!state[id];
                    else if (el.value !== state[id]) el.value = state[id] || (el.type === 'number' ? '0' : '');
                });
                document.getElementById('character-portrait-img').src = state['character-portrait-url'] || 'https://placehold.co/600x400/eeeeee/333333?text=Character+Art';
                document.querySelectorAll('.awakening-checkbox').forEach(el => {
                    const details = el.closest('.awakening-stone-group').querySelector('.awakening-details');
                    if (details) details.style.display = el.checked ? 'block' : 'none';
                });
                updateCalculations();
            } catch (error) {
                console.error("Render error:", error);
            }
            isUpdatingFromDb = false;
        }

        function updateCalculations() {
            if(!document.getElementById('proficiency-bonus')) return;

            const proficiency = parseInt(state['proficiency-bonus']) || 0;
            const abilityMods = {};
            const totalBonuses = ABILITIES.reduce((acc, ab) => ({ ...acc, [ab]: 0 }), {});

            ESSENCE_TYPES.forEach(type => {
                if (type.id !== 'confluence') {
                    [0, 1].forEach(i => { if (state[`e-${type.id}-bonus${i}-check`]) totalBonuses[state[`e-${type.id}-bonus${i}-ability`] || 'strength'] += parseInt(state[`e-${type.id}-bonus${i}-value`]) || 0; });
                }
                [0, 1, 2, 3].forEach(i => { if (state[`e-${type.id}-s${i}-check`] && state[`e-${type.id}-s${i}-bonus-check`]) totalBonuses[state[`e-${type.id}-s${i}-bonus-ability`] || 'strength'] += parseInt(state[`e-${type.id}-s${i}-bonus-value`]) || 0; });
            });

            ABILITIES.forEach(ab => {
                const base = parseInt(state[`${ab}-base-score`]) || 10;
                const bonus = totalBonuses[ab] || 0;
                const total = base + bonus;
                const mod = Math.floor((total - 10) / 2);
                abilityMods[ab] = mod;
                document.getElementById(`${ab}-total-score`).textContent = total;
                document.getElementById(`${ab}-total-score`).classList.toggle('boosted', bonus > 0);
                document.getElementById(`${ab}-mod`).textContent = mod >= 0 ? `+${mod}` : mod;
            });

            document.getElementById('initiative').value = abilityMods.dexterity >= 0 ? `+${abilityMods.dexterity}` : abilityMods.dexterity;
            
            SKILLS.forEach(skill => {
                const id = skill.n.toLowerCase().replace(/ /g, '-');
                const prof = state[`skill-${id}-prof`] ? proficiency : 0;
                const other = parseInt(state[`skill-${id}-other`]) || 0;
                document.getElementById(`${id}-mod`).textContent = `+${abilityMods[skill.a] + prof + other}`;
            });
            
            ABILITIES.forEach(ab => {
                const prof = state[`save-prof-${ab}`] ? proficiency : 0;
                const other = parseInt(state[`save-other-${ab}`]) || 0;
                document.getElementById(`saving-throw-${ab}`).textContent = `+${abilityMods[ab] + prof + other}`;
            });
        }
        
        function handleInteraction(e) {
            if (isUpdatingFromDb) return;
            const target = e.target.closest('[data-id]');
            if (target) {
                const id = target.dataset.id;
                state[id] = target.type === 'checkbox' ? target.checked : target.value;
                render();
                debouncedSave();
            }
        }
        
        async function saveData() {
            if (!dbRef) return;
            const saveStatus = document.getElementById('save-status');
            try {
                await setDoc(dbRef, { state });
                saveStatus.textContent = 'Saved!'; saveStatus.style.color = 'var(--text-secondary)'; saveStatus.style.opacity = '1';
                setTimeout(() => { saveStatus.style.opacity = '0'; }, 2000);
            } catch (error) { console.error("Save Error:", error); saveStatus.textContent = 'Error Saving!'; saveStatus.style.color = 'red'; }
        }
        
        // --- UI Construction ---
        function createEssenceBlock(type) {
            const abilityOptions = () => ABILITIES.map(ab => buildElement('option', {value: ab, text: ab.charAt(0).toUpperCase() + ab.slice(1)}));
            return buildElement('div', {class:'essence-block', 'data-essence-id':type.id, children: [
                buildElement('h3', {class:'essence-title', text: type.title}),
                buildElement('input', {'data-id':`e-${type.id}-name`, placeholder:'Essence Name', class:'mb-2'}),
                ...(type.id !== 'confluence' ? [
                    buildElement('label', {class:'essence-label', text:'Stat Modifiers'}),
                    buildElement('div', {class:'grid grid-cols-1 md:grid-cols-2 gap-2 mb-2', children: Array.from({length:2}, (_,i)=>
                        buildElement('div', {class:'stat-bonus-group flex items-center gap-2 p-1 rounded-md', children: [
                            buildElement('input', {'data-id':`e-${type.id}-bonus${i}-check`, type:'checkbox', class:'bonus-toggle-checkbox'}),
                            buildElement('div', {class:'flex items-center gap-1 flex-grow', children: [
                                buildElement('span',{class:'font-bold', text:'+'}),
                                buildElement('input', {'data-id':`e-${type.id}-bonus${i}-value`, type:'number', class:'w-16'}),
                                buildElement('select', {'data-id':`e-${type.id}-bonus${i}-ability`, class:'flex-1', children: abilityOptions()})
                            ]})
                        ]})
                    )})
                ] : []),
                buildElement('label', {class:'essence-label', text:'Proficiencies'}),
                buildElement('textarea', {'data-id':`e-${type.id}-proficiencies`, class:'h-20'}),
                buildElement('label', {class:'essence-label', text:'Passive Trait'}),
                buildElement('textarea', {'data-id':`e-${type.id}-passive`, class:'h-24'}),
                buildElement('label', {class:'essence-label', text:'Active Ability'}),
                buildElement('textarea', {'data-id':`e-${type.id}-active`, class:'h-24'}),
                buildElement('label', {class:'essence-label', text:'Awakening Stones'}),
                buildElement('div', {class:'grid grid-cols-2 gap-x-4 gap-y-2 mt-1', children: Array.from({length:4}, (_, i) => 
                    buildElement('div', {class:'awakening-stone-group', children: [
                        buildElement('div', {class:'flex items-center gap-2', children: [buildElement('input', {'data-id':`e-${type.id}-s${i}-check`, type:'checkbox', class:'awakening-checkbox'}), buildElement('label',{class:'font-semibold', text:`Stone ${i+1}`})]}),
                        buildElement('div', {class:'awakening-details', children: [
                            buildElement('div', {class:'stat-bonus-group flex items-center gap-2 p-1 rounded-md border my-2', children:[buildElement('input',{'data-id':`e-${type.id}-s${i}-bonus-check`,type:'checkbox',class:'bonus-toggle-checkbox'}),buildElement('label',{class:'text-sm',text:'Bonus:'}),buildElement('div',{class:'flex items-center gap-1 flex-grow',children:[buildElement('span',{class:'font-bold',text:'+'}),buildElement('input',{'data-id':`e-${type.id}-s${i}-bonus-value`,type:'number',class:'w-16'}),buildElement('select',{'data-id':`e-${type.id}-s${i}-bonus-ability`,class:'flex-1',children:abilityOptions()})]})]}),
                            buildElement('div',{class:'grid grid-cols-1 md:grid-cols-3 gap-2',children:[buildElement('input',{'data-id':`e-${type.id}-s${i}-name`,placeholder:'Stone Name',class:'md:col-span-2'}),buildElement('div',{class:'flex items-center',children:[buildElement('input',{'data-id':`e-${type.id}-s${i}-nexus`,type:'number',placeholder:'Nexus %',class:'text-center'}),buildElement('span',{class:'ml-1 font-semibold',text:'%'})]})]}),
                            buildElement('textarea',{'data-id':`e-${type.id}-s${i}-desc`, class:'w-full h-28 p-2 mt-2'})
                        ]})
                    ]})
                )})
            ]});
        }
        function createDiceRoller(container){container.innerHTML += `<div class="section-container"><h2 class="section-title">Dice Roller</h2><div class="flex border-b mb-4" style="border-color: var(--border-color);"><div id="dice-tab-general" class="main-tab active">General</div><div id="dice-tab-attack" class="main-tab">Attack</div></div><div id="dice-content-general"><div class="flex items-center gap-2"><input id="general-dice-num" type="number" value="1" class="w-16 text-center"><span class="font-bold">d</span><select id="general-dice-type" class="flex-grow"><option value="4">4</option><option value="6">6</option><option value="8">8</option><option value="10">10</option><option value="12">12</option><option value="20" selected>20</option><option value="100">100</option></select><span class="font-bold">+</span><input id="general-modifier" type="number" value="0" class="w-16 text-center"></div><button id="general-roll-btn" class="action-button w-full mt-4">Roll</button><div id="general-result" class="mt-4"></div></div><div id="dice-content-attack" class="hidden"><div class="flex items-center gap-2"><label class="font-semibold">To Hit Bonus:</label><span class="font-bold">+</span><input id="attack-modifier" type="number" value="0" class="w-24 text-center"></div><button id="attack-roll-btn" class="action-button w-full mt-4">Roll Attack</button><div id="attack-result" class="mt-4"></div></div></div>`;}
        
        function buildUI() {
            const mainContent = document.getElementById('main-content');
            mainContent.append(buildElement('div', { id: 'page-sheet' }), buildElement('div', { id: 'page-backstory', class: 'hidden' }));
            
            // Sheet Page
            const pageSheet = document.getElementById('page-sheet');
            const mainGrid = buildElement('div', { class: 'grid grid-cols-1 lg:grid-cols-3 gap-8' });
            const [leftCol, middleCol, rightCol] = [buildElement('div'), buildElement('div'), buildElement('div')];
            leftCol.className = middleCol.className = rightCol.className = 'lg:col-span-1 flex flex-col gap-8';
            mainGrid.append(leftCol, middleCol, rightCol);
            pageSheet.append(
                buildElement('div', { class: 'section-container text-center mb-8', children: [buildElement('input', { 'data-id': 'character-name-input', type: 'text', placeholder: 'CHARACTER NAME', class: 'medieval-title text-4xl md:text-6xl text-center bg-transparent border-none w-full focus:ring-0 p-0' })]}),
                mainGrid
            );
            
            // Left Column
            leftCol.append(
                buildElement('div', { class: 'section-container', children: [ buildElement('h2', { class: 'section-title', text: 'Ability Scores' }), buildElement('div', { class: 'grid grid-cols-1 gap-4', children: ABILITIES.map(ab => buildElement('div', { class: 'stat-box', children: [ buildElement('label', { class: 'font-bold text-lg', text: ab.charAt(0).toUpperCase() + ab.slice(1) }), buildElement('div', { id: `${ab}-total-score`, class: 'total-score mt-1' }), buildElement('div', { id: `${ab}-mod`, class: 'mod-display text-xl mx-auto my-2' }), buildElement('input', { 'data-id': `${ab}-base-score`, type: 'number', class: 'text-center text-sm', title: `Base ${ab} Score` }) ]})) })]}),
                buildElement('div', { class: 'section-container', children: [ buildElement('h2', { class: 'section-title', text: 'Saving Throws' }), buildElement('div', { class: 'space-y-2', children: ABILITIES.map(ab => buildElement('div', { class: 'skill-row', children: [ buildElement('input', { 'data-id': `save-prof-${ab}`, type: 'checkbox', class: 'proficiency-checkbox saving-throw-prof'}), buildElement('label', { class: 'font-semibold', text: ab.charAt(0).toUpperCase() + ab.slice(1) }), buildElement('input', { 'data-id': `save-other-${ab}`, type: 'number', class: 'other-mod-input text-center' }), buildElement('span', { id: `saving-throw-${ab}`, class: 'font-bold text-lg'}) ]})) })]})
            );

            // Middle Column
            middleCol.append(
                buildElement('div', { class: 'section-container', html: `<div class="grid grid-cols-3 gap-4 text-center"><div class="stat-box"><label class="font-bold">Armor Class</label><input data-id="armor-class" type="number" class="text-2xl font-bold text-center bg-transparent border-none focus:ring-0 p-0"></div><div class="stat-box"><label class="font-bold">Initiative</label><input id="initiative" type="text" readonly class="text-2xl font-bold text-center bg-transparent border-none focus:ring-0 p-0"></div><div class="stat-box"><label class="font-bold">Speed</label><input data-id="speed" type="text" class="text-2xl font-bold text-center bg-transparent border-none focus:ring-0 p-0"></div></div><div class="grid grid-cols-2 gap-4 text-center mt-4"><div class="stat-box"><label class="font-bold">Mana</label><input data-id="mana" type="number" class="text-2xl font-bold text-center bg-transparent border-none focus:ring-0 p-0"></div><div class="stat-box"><label class="font-bold">Proficiency</label><input data-id="proficiency-bonus" id="proficiency-bonus" type="number" class="text-2xl font-bold text-center bg-transparent border-none focus:ring-0 p-0"></div></div>` }),
                buildElement('div', { class: 'section-container', children: [ buildElement('h2', {class: 'section-title', text:'Essences'}), ...ESSENCE_TYPES.map(createEssenceBlock) ]})
            );

            // Right Column
            createDiceRoller(rightCol);
            rightCol.appendChild(buildElement('div', {class:'section-container', children: [buildElement('h2', {class:'section-title', text:'Skills'}), buildElement('div', {class:'space-y-1', children: SKILLS.sort((a,b) => a.n.localeCompare(b.n)).map(skill => { const id=skill.n.toLowerCase().replace(/ /g,'-'); return buildElement('div',{class:'skill-row', children: [buildElement('input',{'data-id':`skill-${id}-prof`, type:'checkbox', class:'proficiency-checkbox skill-prof','data-ability':skill.a}),buildElement('label',{class:'font-semibold',text:`${skill.n} (${skill.a.slice(0,3).toUpperCase()})`}),buildElement('input',{'data-id':`skill-${id}-other`, type:'number', class:'other-mod-input text-center'}),buildElement('span',{id:`${id}-mod`, class:'font-bold text-lg'})]}) }) })]}));
        
            // Backstory Page
            const pageBackstory = document.getElementById('page-backstory');
            pageBackstory.innerHTML = `<div class="grid grid-cols-1 lg:grid-cols-3 gap-8"><div class="lg:col-span-2 flex flex-col gap-8"><div class="section-container"><h2 class="section-title">Character Backstory</h2><textarea data-id="backstory-text" class="w-full h-96 p-2" placeholder="Write your full backstory here..."></textarea></div><div class="section-container"><h2 class="section-title">Allies & Organizations</h2><textarea data-id="allies-text" class="w-full h-48 p-2" placeholder="Describe your character's relationships..."></textarea></div></div><div class="lg:col-span-1 flex flex-col gap-8"><div class="section-container"><h2 class="section-title">Character Portrait</h2><div class="p-2 border border-dashed rounded-lg" style="border-color: var(--border-color);"><img id="character-portrait-img" src="https://placehold.co/600x400/eeeeee/333333?text=Character+Art" alt="Character Portrait" class="w-full h-auto rounded-md" onerror="this.onerror=null; this.src='https://placehold.co/600x400/eeeeee/333333?text=Invalid+Image';"></div><label class="block text-sm font-medium mt-4">Image URL</label><input data-id="character-portrait-url" type="text" placeholder="Paste image URL here..." class="mt-1"></div><div class="section-container"><h2 class="section-title">Appearance</h2><textarea data-id="appearance-text" class="w-full h-48 p-2" placeholder="Describe your character's physical appearance..."></textarea></div><div class="section-container"><h2 class="section-title">Personality</h2><textarea data-id="personality-text" class="w-full h-48 p-2" placeholder="Describe your character's personality..."></textarea></div></div></div>`;
        }

        function setupEventListeners() {
            document.getElementById('theme-selector').append(...THEMES.map(t => buildElement('option', {value: t, text: t.charAt(0).toUpperCase() + t.slice(1)})));
            document.getElementById('main-nav-tabs').append(buildElement('div', { class: 'main-tab active', 'data-page': 'sheet', text: 'Character Sheet', on: { click: () => showPage('sheet') } }), buildElement('div', { class: 'main-tab', 'data-page': 'backstory', text: 'Backstory & Notes', on: { click: () => showPage('backstory') } }));
            document.getElementById('share-button').addEventListener('click', () => document.getElementById('share-modal').classList.remove('hidden'));
            const shareModal = document.getElementById('share-modal');
            shareModal.innerHTML = `<div class="section-container w-full max-w-md"><h2 class="section-title">Create a Custom Shareable Link</h2><p class="text-sm mb-4">Enter a unique name. Use lowercase letters, numbers, and hyphens.</p><label class="font-semibold">Custom Name:</label><input type="text" id="custom-id-input" placeholder="e.g., grak-the-barbarian" class="mt-1"><div id="share-message" class="text-sm mt-2 h-4"></div><div class="flex gap-4 mt-4"><button id="set-custom-id-button" class="action-button flex-grow">Set Custom Link</button><button id="close-modal-button" class="action-button" style="background-color: var(--text-secondary);">Close</button></div></div>`;
            shareModal.querySelector('#close-modal-button').addEventListener('click', () => shareModal.classList.add('hidden'));
            shareModal.querySelector('#set-custom-id-button').addEventListener('click', async () => { const input = document.getElementById('custom-id-input'); const msg = document.getElementById('share-message'); const newId = input.value.trim().toLowerCase().replace(/[^a-z0-9-]/g, '-').replace(/-+/g, '-'); if (!newId) { msg.textContent = "Please enter a valid name."; msg.style.color = 'red'; return; } msg.textContent = "Checking..."; msg.style.color = 'var(--text-secondary)'; const newDocRef = doc(db, 'artifacts', appId, 'public', 'data', 'sheets', newId); const docSnap = await getDoc(newDocRef); if (docSnap.exists() && newId !== characterId) { msg.textContent = "Name taken. Try another."; msg.style.color = 'red'; } else { const newUrl = new URL(window.location.href); newUrl.searchParams.set('id', newId); await setDoc(newDocRef, { state }); msg.innerHTML = `Success! Your new link is:<br><a href="${newUrl.href}" target="_blank" class="text-blue-500 underline">${newUrl.href}</a>`; msg.style.color = 'green'; }});
            document.getElementById('dice-tab-general').addEventListener('click', () => { document.getElementById('dice-tab-general').classList.add('active'); document.getElementById('dice-tab-attack').classList.remove('active'); document.getElementById('dice-content-general').classList.remove('hidden'); document.getElementById('dice-content-attack').classList.add('hidden'); });
            document.getElementById('dice-tab-attack').addEventListener('click', () => { document.getElementById('dice-tab-attack').classList.add('active'); document.getElementById('dice-tab-general').classList.remove('active'); document.getElementById('dice-content-attack').classList.remove('hidden'); document.getElementById('dice-content-general').classList.add('hidden'); });
            document.getElementById('general-roll-btn').addEventListener('click', () => { const num = parseInt(document.getElementById('general-dice-num').value)||1, type = parseInt(document.getElementById('general-dice-type').value)||20, mod = parseInt(document.getElementById('general-modifier').value)||0; let t=0,r=[]; for(let i=0;i<num;i++){const roll=Math.floor(Math.random()*type)+1;r.push(roll);t+=roll;}t+=mod;document.getElementById('general-result').innerHTML = `<div class="text-3xl">${t}</div><div class="text-xs w-full mt-1">(Rolls: [${r.join(', ')}] + Mod: ${mod})</div>`;});
            document.getElementById('attack-roll-btn').addEventListener('click', () => { const mod=parseInt(document.getElementById('attack-modifier').value)||0,roll=Math.floor(Math.random()*20)+1,total=roll+mod;let c='',t='';if(roll===20){c='text-green-600';t='CRIT!';}else if(roll===1){c='text-red-600';t='MISS!';}document.getElementById('attack-result').innerHTML=`<div class="text-3xl ${c}">${total}</div><div class="text-xs w-full mt-1">(Roll: ${roll} + Mod: ${mod})<br><span class="font-bold ${c}">${t}</span></div>`;});
        }
        function showPage(pageId) {
            document.querySelectorAll('#main-content > div').forEach(el => el.classList.add('hidden'));
            document.getElementById(`page-${pageId}`).classList.remove('hidden');
            document.querySelectorAll('#main-nav-tabs > div').forEach(el => el.classList.remove('active'));
            document.querySelector(`#main-nav-tabs > div[data-page="${pageId}"]`).classList.add('active');
        }
        
        async function init() {
            buildUI();
            document.getElementById('app-container').addEventListener('input', handleInteraction);
            document.getElementById('app-container').addEventListener('change', handleInteraction);
            setupEventListeners();
            onAuthStateChanged(auth, async (user) => {
                if (!user) { await signInAnonymously(auth); return; }
                const urlParams = new URLSearchParams(window.location.search);
                characterId = urlParams.get('id');
                if (!characterId) { characterId = `char_${user.uid.slice(0,5)}_${Date.now()}`; }
                dbRef = doc(db, 'artifacts', appId, 'public', 'data', 'sheets', characterId);
                if (unsubscribe) unsubscribe();
                unsubscribe = onSnapshot(dbRef, (doc) => { isUpdatingFromDb=true; state=doc.exists()?doc.data().state||{}:{}; render(); isUpdatingFromDb=false; if(!doc.exists())saveData(); });
            });
        }
        
        init();
    </script>
</body>
</html>
